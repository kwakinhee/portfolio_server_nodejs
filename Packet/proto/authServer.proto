syntax = "proto3";

package GIANTSTEP.AS.Protocol;
// BUILD_PROTO_VERSION 은 proto 파일 변경사항이 있을시 꼭 수정해야함.
// BUILD_PROTO_VERSION = 0.001;

// ProtoBuf 파일 PacketType 또는 MessageType 추가시 서버쪽 AuthServer 경로의 packetHandler 파일의 .index , protocol파일의 packetSerder.ts 확인필요! 
// PacketType 네이밍 규칙 반드시 지키기 (Prefix 통일, 메시지 이름과 반드시 동일하게)
// 여러 proto에서 공통적으로 쓰는 구조체는 common.proto로 별도 정의하기
// 타입명은 여러 proto에서 서로 겹치지 않도록 (겹치는 경우 common에 작성하는 것 고려)
// byte 웬만하면 쓰지 말고 string으로 사용
// required 정의 하면 안됨


// * proto3 에서 enum의 첫번째 value 는 0 이여야 함.
// * proto3 에서 enum들의 이름이 중복되지 말아야 함.
// * proto3 에서 모든 필드는 optional.
// * proto3 에서 optional를 명시하면 해당 필드에 값을 명시적으로 세팅 하였는지 확인할수 있는 is_set() 비트가 추가된다.
// * syntax = "proto3"; 이 가장 위에 선언되어야 함.

// 패킷 Proto 구조 정의.

// user -> server Request 인경우.
// 응답이 필요한 요청 CQ.
// 응답이 필요하지 않은 통지 CN.

// server -> user Response 인경우.
// 응답이 필요한 요청 CQ 에 대한 응답 SA.
// 응답이 필요하지 않은 통지 SN.

// server <-> user  패킷 Protocol 정의.
enum PacketType {
	AS_NONE_PACKET = 0;

	AS_CQ_Login = 102;
	AS_CQ_GetWorldServerAddress = 104;

	AS_SA_Login = 1000;
	AS_SA_GetWorldServerAddress = 1002;

	AS_SN_Kick = 1005;
	AS_SN_Logout = 1006;

	AS_CQ_Ping = 30000;
	AS_SA_Pong = 30001;
	AS_ServerError = 30002;
	
	AS_MAX_PACKET = 32767;
}

// 클라이언트 kick 종류
enum KICK_TYPE
{
	NAVER_CONTROLLER_KICK = 0;
}

enum NOTICE_MESSAGE_TYPE
{
	GENERAL = 0;
	URGENT = 1;
	WARNING = 2;
}

message User
{
	optional int32 userId = 1;
	optional string accountId = 2;
	int32 isAdmin = 3;
}


// Client -> Server Request
message CQ_Login
{
	string accountId = 1; // Dev 환경인 경우 로그인 창에서 입력하는 아이디, Prod 환경인 경우 다른 외부에서 생성된 Unique한 AccountId.
	string clientVersion = 2; // 클라이언트 앱 버전 (빌드 버전).
	string loginPlatform = 3; // 구글, 페이스북, None 소셜 플랫폼.
}

message CQ_Ping
{
	optional bool serverTimeUtcRequest = 1;
	optional int64 clientTimeUtc = 2;
	optional string stressMessage = 3;
}

message CQ_GetWorldServerAddress
{
}


message ServerError
{
	int32 errCode = 1;
	optional string errMessage = 2;
	PacketType failedCQPacket = 3;
}


// Server -> Client Response
message SA_Login
{
	bool result = 1;
	int64 loginTimeUtc = 2;
	string enterWorldToken = 3;
	int32 isAdmin = 4;
	bool isNewUser = 5;
}

message SA_GetWorldServerAddress
{
	bool result = 1;
	string serverAddress = 2;
}

message SN_Kick
{
	KICK_TYPE kickType = 1;
}


message SN_Logout
{
	int32 userId = 1;  // 로그 아웃된 userId.
	int32 userCount = 2; // 유저 동접.
}

message SA_Pong
{
	optional int64 serverTimeUtc = 1;
	optional string stressMessage = 2;
}
